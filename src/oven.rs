use std::collections::HashMap;

// 焦炉结构
#[derive(Debug)]
pub struct CokeOven {
    pub chambers: Vec<String>,
}

impl CokeOven {
    pub fn new(chambers: &[&str]) -> Self {
        CokeOven {
            chambers: chambers.iter().map(|s| s.to_string()).collect(),
        }
    }

    pub fn is_valid_chamber(&self, chamber: &str) -> bool {
        self.chambers.iter().any(|c| c == chamber)
    }
}

// 初始化焦炉数据
pub fn initialize_ovens() -> HashMap<i32, CokeOven> {
    let mut ovens = HashMap::new();

    ovens.insert(
        1,
        CokeOven::new(&[
            "1#", "2#", "3#", "4#", "5#", "6#", "7#", "8#", "9#", "11#", "12#", "13#", "14#",
            "15#", "16#", "17#", "18#", "19#", "21#", "22#", "23#", "24#", "25#", "26#", "27#",
            "28#", "29#", "31#", "32#", "33#", "34#", "35#", "36#", "37#", "38#", "39#", "41#",
            "42#", "43#", "44#", "45#", "46#", "47#", "48#", "49#", "51#", "52#", "53#", "54#",
            "55#", "56#", "57#", "58#", "59#", "61#", "62#", "63#", "64#", "65#", "66#", "67#",
            "68#", "69#", "71#", "72#", "73#", "74#", "75#",
        ]),
    );

    ovens.insert(
        2,
        CokeOven::new(&[
            "76#", "77#", "78#", "79#", "81#", "82#", "83#", "84#", "85#", "86#", "87#", "88#",
            "89#", "91#", "92#", "93#", "94#", "95#", "96#", "97#", "98#", "99#", "101#", "102#",
            "103#", "104#", "105#", "106#", "107#", "108#", "109#", "111#", "112#", "113#", "114#",
            "115#", "116#", "117#", "118#", "119#", "121#", "122#", "123#", "124#", "125#", "126#",
            "127#", "128#", "129#", "131#", "132#", "133#", "134#", "135#", "136#", "137#", "138#",
            "139#", "141#", "142#", "143#", "144#", "145#", "146#", "147#", "148#", "149#", "151#",
        ]),
    );

    ovens.insert(
        3,
        CokeOven::new(&[
            "1#", "2#", "3#", "4#", "5#", "6#", "7#", "8#", "9#", "11#", "12#", "13#", "14#",
            "15#", "16#", "17#", "18#", "19#", "21#", "22#", "23#", "24#", "25#", "26#", "27#",
            "28#", "29#", "31#", "32#", "33#", "34#", "35#", "36#", "37#", "38#", "39#", "41#",
            "42#", "43#", "44#", "45#", "46#", "47#", "48#", "49#", "51#", "52#", "53#", "54#",
            "55#", "56#", "57#", "58#", "59#", "61#", "62#", "63#", "64#", "65#", "66#", "67#",
            "68#", "69#", "71#", "72#", "73#", "74#", "75#",
        ]),
    );

    ovens
}

// 测试代码
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_oven_validation() {
        let ovens = initialize_ovens();

        // 验证 1# 焦炉的有效炭化室
        let oven1 = ovens.get(&1).unwrap();
        assert!(oven1.is_valid_chamber("1#"));
        assert!(oven1.is_valid_chamber("75#"));
        assert!(!oven1.is_valid_chamber("76#"));

        // 验证 2# 焦炉的有效炭化室
        let oven2 = ovens.get(&2).unwrap();
        assert!(oven2.is_valid_chamber("76#"));
        assert!(oven2.is_valid_chamber("151#"));
        assert!(!oven2.is_valid_chamber("75#"));

        let oven3 = ovens.get(&3).unwrap();
        assert!(oven3.is_valid_chamber("1#"));
        assert!(oven3.is_valid_chamber("75#"));
        assert!(!oven3.is_valid_chamber("76#"));
    }
}